{"version":3,"sources":["Form.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","placeholder","name","Weather","city","tempreture","feels","description","country","error","className","APIKEY","App","useState","weather","setWeather","e","a","preventDefault","target","elements","value","fetch","then","res","json","data","apiData","sys","Math","round","main","temp","feels_like","alert","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8NAqBeA,G,MAnBF,SAACC,GACV,OACI,0BAAMC,SAAUD,EAAME,YAClB,2BACIC,KAAK,OACLC,YAAY,OACZC,KAAK,SAGT,2BACKF,KAAK,OACNC,YAAY,UACZC,KAAK,YAET,6CCDGC,EAZC,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,KAAKC,EAAgD,EAAhDA,WAAWC,EAAqC,EAArCA,MAAMC,EAA+B,EAA/BA,YAAYC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,MACxD,OACE,yBAAKC,UAAU,SACRN,GAAQI,GAAW,2BAAIJ,EAAJ,KAAYI,EAAZ,KACnBH,GAAc,0CAAgBA,EAAhB,SACdC,GAAS,6CAAmBA,GAC5BC,GAAgB,2CAAiBA,EAAjB,KAChBE,GAAS,2BAAIA,EAAJ,OCLhBE,EAAS,mCAsDAC,MAnDf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,iDAGb,WAAyBC,GAAzB,mBAAAC,EAAA,6DACED,EAAEE,iBACId,EAAOY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC9Bb,EAAUQ,EAAEG,OAAOC,SAASZ,QAAQa,MAH5C,SAKwBC,MAAK,4DAC4BlB,EAD5B,YACoCI,EADpC,kBACqDG,IAE7EY,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUA,KATpB,OAKQC,EALR,OAWIZ,EADEX,GAAQI,EACC,CACTkB,KAAMC,EACNvB,KAAMuB,EAAQzB,KACdM,QAASmB,EAAQC,IAAIpB,QACrBH,WAAYwB,KAAKC,MAAMH,EAAQI,KAAKC,KAAO,QAC3C1B,MAAOuB,KAAKC,MAAMH,EAAQI,KAAKE,WAAa,QAC5C1B,YAAaoB,EAAQb,QAAQ,GAAGP,YAChCE,MAAO,IAGE,CACTiB,KAAM,GACNtB,KAAM,GACNI,QAAS,GACTH,WAAY,GACZC,MAAO,GACPC,YAAa,GACbE,MAAOyB,MAAM,yCA5BnB,4CAHa,sBAmCb,OACE,yBAAKxB,UAAU,OACb,2CACA,kBAAC,EAAD,CAAMX,WAtCG,8CAuCT,kBAAC,EAAD,CACEK,KAAMU,EAAQV,KACdI,QAASM,EAAQN,QACjBH,WAAYS,EAAQT,WACpBC,MAAOQ,EAAQR,MACfC,YAAaO,EAAQP,cAEtB4B,QAAQC,IAAItB,KC1CCuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL0B,QAAQ1B,MAAMA,EAAM4C,a","file":"static/js/main.7d8f4e54.chunk.js","sourcesContent":["import React from 'react';\r\n//once the user clicks on button , the props will get passed through.\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.getWeather}>\r\n            <input\r\n                type='text'\r\n                placeholder='city'\r\n                name='city'\r\n            />\r\n\r\n            <input\r\n                 type='text'\r\n                placeholder='country'\r\n                name='country'\r\n            />\r\n            <button>Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\r\n//added the weather component on its own .\r\n//passing variables that have been declared in app.js\r\nconst Weather = ({city,tempreture,feels,description,country,error}) => {\r\n    return (\r\n      <div className=\"input\">\r\n            {city && country && <p>{city}, {country} </p>}\r\n            {tempreture && <p>Tempreture: {tempreture}Â°C</p>}\r\n            {feels && <p>It feels like: {feels}</p>}\r\n            {description &&  <p>Description: {description} </p>}\r\n            {error && <p>{error} </p>}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Weather from \"./Weather\";\n\nconst APIKEY = \"4f40031c90bee253c559f5cbfa27719c\";\n//apikey found on openweather.org\n\nfunction App() {\n  const [weather, setWeather] = useState([]);\n\n  async function fetchData(e) {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const apiData = await fetch (\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`\n    )\n      .then((res) => res.json())\n      .then((data) => data);\n    if (city && country) {\n      setWeather({\n        data: apiData,\n        city: apiData.name,\n        country: apiData.sys.country,\n        tempreture: Math.round(apiData.main.temp - 273.15),\n        feels: Math.round(apiData.main.feels_like - 273.15),\n        description: apiData.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      setWeather({\n        data: \"\",\n        city: \"\",\n        country: \"\",\n        tempreture: \"\",\n        feels: \"\",\n        description: \"\",\n        error: alert(\"Please enter valid City and Country\"),\n      });\n    }\n  }\n  return (\n    <div className=\"App\">\n      <h3>WEATHER APP</h3>\n      <Form getWeather={fetchData} />\n      <Weather\n        city={weather.city}\n        country={weather.country}\n        tempreture={weather.tempreture}\n        feels={weather.feels}\n        description={weather.description}\n      />\n      {console.log(weather)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}